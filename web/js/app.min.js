var FDJ = {
	Models : {},
	Collections : {},
	Views: {},

	initFramework : function(){

			//error status definitions
			

	},

	initApp:function(){
		window.model = new FDJ.Models.MainModel();
		window.view = new FDJ.Views.MainView({model:window.model});
		window.debug = new FDJ.Views.DebugPanel({model:window.model});
	},
};

//--models
//@codekit-append "models/main.js";
//@codekit-append "models/facebookProxy.js";
//@codekit-append "models/YoutubeProxy.js";
//@codekit-append "models/song.js";

//--collections
//@codekit-append "collections/queue.js";

//--views
//@codekit-append "views/main.js";
//@codekit-append "views/loader.js";
//@codekit-append "views/login.js";
//@codekit-append "views/home.js";
////@codekit-append "views/home/header.js";
//@codekit-append "views/home/fbInfo.js";
//@codekit-append "views/home/grid.js";
//@codekit-append "views/home/player.js";
//@codekit-append "views/home/grid/tile.js";
//@codekit-append "views/home/grid/noSongs.js";
//@codekit-append "views/modals/loggedOut.js";
//@codekit-append "views/modals/noConnection.js";
//@codekit-append "views/debug.js";

$(function(){
	FDJ.initFramework();
	FDJ.initApp();
});

/*********************************************** 
     Begin main.js 
***********************************************/ 

FDJ.Models.MainModel = Backbone.Model.extend({
				initialize:function(){
					this.set('facebookProxy', new FDJ.Models.FacebookProxy({app_id:'480004502036911', channel:'/channel.php'}));
					this.set('youtubeProxy', new FDJ.Models.YoutubeProxy());
					
					this.set('current_queue', new FDJ.Collections.Queue());
					this.get('current_queue').comparator = this.DCSortBy;
					this.set('current_view',null);
					this.set('main_view',null);
					

					this.listenTo(this.get('facebookProxy'), 'change:last_songs', this.onLastSongsChange);
					this.listenTo(this, 'LastSongsChanged', this.autoplay);
					this.listenTo(this.get('current_queue'), 'add', this.autoFetchSong);
					this.listenTo(this.get('youtubeProxy'), 'complete', this.playNext);
					
				},

				onLastSongsChange:function(){
					this.get('current_queue').update(this.get('facebookProxy').get('last_songs').models, {remove:false});
					this.trigger('LastSongsChanged');
				},

				autoFetchSong:function(song){
					song.fetch({update:true});
				},

				DCSortBy:function(song){
					return -song.get('publish_time_mili');
				},

				/**
				 * Internal function, dont call this outside
				 * @return {[type]} [description]
				 */
				autoplay:function(){
					this.stopListening(this, "LastSongsChanged");
					this.playNext();
				},

				playNext:function(){
					console.log("PLAY NEXT!!!");
					var currentSong = this.get('current_song');
					if(this.has('current_song')){
						this.get('current_song').set('played', true);
					}

					currentSong = this.get('current_queue').find(function(song){
						return !song.has('played') || !song.get('played');
					});

					this.set('current_song', currentSong);
					if(currentSong.has('videoId')){
						this.get('youtubeProxy').play(currentSong);
					}else{
						this.listenTo(currentSong, "change:videoId", this.playOnSongLoad);
					}
					
				},

				playOnSongLoad:function(){
					console.log("playOnSongLoad");
					this.stopListening(this.get("current_song"), "change:videoId");
					this.get('youtubeProxy').play(this.get("current_song"));
				}
			});

/*********************************************** 
     Begin facebookProxy.js 
***********************************************/ 

FDJ.Models.FacebookProxy = Backbone.Model.extend({
				
	initialize:function(){
		
		this.listenTo(this, 'change:isLoggedIn', this.onIsLoggedInChange);
		this.set('fbUser', null);
		this.set('statusError', this.constructor.NO_ERROR);

	},
	
	loadJDKAndInit:function(){
		
		window.fbAsyncInit = $.proxy(this.init, this);
		//load jdk
		(function(d){
		     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
		     if (d.getElementById(id)) {return;}
		     js = d.createElement('script'); js.id = id; js.async = true;
		     js.src = "//connect.facebook.net/en_US/all.js";
		     ref.parentNode.insertBefore(js, ref);
		   }(document));

	},

	init:function(){
		
		FB.init({
	      appId      : this.get('app_id'), // App ID
	      channelUrl : this.get('channel'), // Channel File
	      status     : true, // check login status
	      cookie     : true, // enable cookies to allow the server to access the session
	      xfbml      : true  // parse XFBML
	    });

	    FB.getLoginStatus($.proxy(this.loginStatus, this));

	    this.trigger('init');
	},

	loginStatus:function(response){
		
		if (response.status === 'connected') {
		// connected
			this.set('isLoggedIn', true);
			this.getFBUser();
		} else if (response.status === 'not_authorized') {
			this.set('isLoggedIn', false);
			// not_authorized
			//this.doLogin();
		} else {
			this.set('isLoggedIn', false);
			// not_logged_in
			//this.doLogin();
		}
	},

	doLogin:function(){
		
		FB.login($.proxy(this.onFBLogin, this));

	},

	doReLogin:function(){
		
		FB.login($.proxy(this.onFBReLogin, this));

	},
	
	doLogout:function(){
		
		FB.logout();
		this.set('isLoggedIn', false);
		this.set('fbUser', false);
		this.set('current_queue', null);

	},

	onFBLogin:function(response){
		
		if (response.authResponse) {
            // connected
            this.getFBUser();
            this.set('isLoggedIn', true);

        } else {
            // cancelled
        }
	},

	onFBReLogin:function(response){
		
		if (response.authResponse) {
			
			this.getLastSongsInterval();
            this.set('statusError', this.constructor.NO_ERROR);
            this.getFBUser();
            
        } else {
            // cancelled
        }
	},

	onIsLoggedInChange:function(){
		
		if(this.get('isLoggedIn')){

			this.getLastSongsInterval();

		}else{

			clearInterval(this.get('interval_songs'));

		}
	},

	getLastSongsInterval:function(){
		
		this.getLastSongs();
		this.set('interval_songs', setInterval($.proxy(this.getLastSongs, this), 60*1000));

	},
	
	getFBUser:function(){
		
		FB.api('/me', $.proxy(this.onFBUser, this));

	},
	
	onFBUser:function(response){
		
		this.set('fbUser', response);
	
	},

	getLastSongs:function(){
		
		FB.api('/me?fields=friends.fields(music.listens.fields(id,from,publish_time,application,data).limit(5))', $.proxy(this.onLastSongs, this));
		
	},
	
	
	onLastSongs:function(response){

		if(typeof response.friends !== 'undefined'){
			
			console.log("got data!");
			this.set('statusError', this.constructor.NO_ERROR);

			var friends = response.friends.data;
			var l_friends = friends.length;
			var last_songs = [];

			var songIndex =0;
			var l_songs = 0;
			var friends_songs = null;
			
			for (var i = l_friends - 1; i >= 0; i--) {
				
				friends_songs =friends[i]["music.listens"]?friends[i]["music.listens"].data:null;
				//console.log(friends_songs);
				if(!friends_songs){continue;} // break if no songs
				
				l_songs = friends_songs.length;
				
				for (var j = 0; j < l_songs; j++) {
					friends_songs[j].itemIndex = songIndex;
					last_songs.push(friends_songs[j]);
					this.set('debug_fake_song',friends_songs[j]);
					songIndex++;
										
					

				};
			}
			this.set("debug_song_array",last_songs);
			//last_songs = null;
			//console.log(last_songs.length);
			
			this.set('last_songs', new FDJ.Collections.Queue(last_songs));
		
		}else if(response.error){
			
			if(response.error.type=="http"){
				
				this.set('statusError', this.constructor.CONNECTION_LOST);

			}else if(response.error.type=="OAuthException"){					
				
				this.set('statusError', this.constructor.USER_LOGGEDOUT);
				clearInterval(this.get('interval_songs'));
				
			}else{
				
				console.log("other response error");

			}	
			
		}else{
			
			this.set('statusError', this.constructor.UNKNOWN_ERROR);
			
		}

	}
				
	},
	//static
	{
		NO_ERROR : "noError",
		USER_LOGGEDOUT : "userLoggedOut",
		CONNECTION_LOST : "connectionLost",
		UNKNOWN_ERROR : "unknownError"
	}
);

/*********************************************** 
     Begin YoutubeProxy.js 
***********************************************/ 

FDJ.Models.YoutubeProxy = Backbone.Model.extend({
				
	initialize:function(){
		this.set('loaded', false);
		this.set('paused', true);
	},

	loadAndInit:function(){
		var tag = document.createElement('script');
		tag.src = "https://www.youtube.com/player_api";
		var firstScriptTag = document.getElementsByTagName('script')[0];
		firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
		window.onYouTubePlayerAPIReady = $.proxy(this.onYouTubePlayerAPIReady, this);
	},

	onYouTubePlayerAPIReady:function(){
		this.set("loaded", true);
	},

	play:function(song){
		this.set('song', song);
		this.set('paused', false);
	},

	pause:function(){
		this.set('paused', !this.get('paused'));
	},

	getYouTubeSongInfo:function(song){
		console.log(song.data.song.id, song.data.song.title);

		$.getJSON('http://127.0.0.1:5000/song/'+song.data.song.id + "/" + song.data.song.title + "/" + song.artist, function(data) {
			 console.log(data);
			 console.log(data.song.songYTData.media$group.media$player.url);
		});
	},

	__onStateChange:function(object){
		this.set('state', object.data, YT.PlayerState.ENDED);
		switch(object.data){
		case YT.PlayerState.ENDED:
			this.trigger('complete');
			break;
		case YT.PlayerState.PLAYING:
			break;
		case YT.PlayerState.PAUSED:
			break;
		}
	}
});

/*********************************************** 
     Begin song.js 
***********************************************/ 

FDJ.Models.Song = Backbone.Model.extend({

			url:function(){
				return (this.collection?this.collection.url:"") + this.get('id')+"/"+this.get('data').song.title+(this.get("artist").length>0?"/"+this.get("artist"):"");
			},

			initialize:function(){
				this.set('publish_time_mili', Date.parse(this.get('publish_time')));
				

				//create artist homogenous property
			
				switch(this.get('application').name){
				case "Spotify":
					var musician = this.get('data').musician;
					this.set('artist', musician?musician.title:"");
					break;
				case "Rdio":
					var groups = this.constructor.rdioParse(this.get('data').song.url);
					this.set('artist', groups[1].replace(/_/g, ' '));
					this.set('album', groups[2].replace(/_/g, ' '));
					break;
				case "8tracks":
					this.set('artist','');
					break;
				default:
					this.set('artist','');
					break;
				}
			}
		},
		//STATIC
		{
			rdioParse:function(url){
				return /^.*artist\/(.+)\/album\/(.+)\/track\/.*/g.exec(url)
			}
	}
);


/*********************************************** 
     Begin queue.js 
***********************************************/ 

FDJ.Collections.Queue = Backbone.Collection.extend({
	model:FDJ.Models.Song,
	url:"http://fdjnode.herokuapp.com/song/"
});

/*********************************************** 
     Begin main.js 
***********************************************/ 

FDJ.Views.MainView = Backbone.View.extend({
				el:$("#main-container"),

				initialize:function(){
					//console.log(this.$el);
					this.model.set('main_view',this);
					this.listenTo(this.model.get('facebookProxy'), 'change:isLoggedIn', this.userLoginChange);
					this.model.get('facebookProxy').loadJDKAndInit();
					
						
					var isLoggedIn = this.model.get('facebookProxy').get('isLoggedIn');
				

					//this.loaderView = new FDJ.Views.LoaderView();
					//this.loginView = new FDJ.Views.LoginView({ model: this.model.get('facebookProxy') } );
					//this.HomeView = new FDJ.Views.HomeView({ model: this.model.get('facebookProxy') } );
					
					if(isLoggedIn){
						this.transitionTo(new FDJ.Views.HomeView({ model: this.model } ));
					}
					
					this.$el.html(new FDJ.Views.LoaderView({ model: this.model }).$el);
					this.$el.append(new FDJ.Views.YTPlayer({model:this.model.get('youtubeProxy')}).$el);
					this.model.get('youtubeProxy').loadAndInit();
				},
				
				userLoginChange:function(){
					var isLoggedIn = this.model.get('facebookProxy').get('isLoggedIn');

					if(isLoggedIn){
						this.transitionTo(new FDJ.Views.HomeView({ model: this.model}));
					}else{
						this.transitionTo(new FDJ.Views.LoginView({ model: this.model}));
					}
					
				},
				
				transitionTo:function(view){
					
					if(this.model.get("current_view")!=null){
						//console.log(this.model.get("current_view").$el);
						this.model.get("current_view").remove();
					} 
					
					this.model.set('current_view',view);
					this.model.get("main_view").$el.append(view.$el);
					
					
					/*
					var obj = this.$el;
					var t = this;

				
					obj.html(view.$el);
					t.$('#wrapper').attr('style', 'margin-top:' + t.$('#header').height() + "px");
					view.reInit();
					
					 obj.fadeTo(500, 0,function(){
							console.log("finished dimming down");
							obj.html(view.$el);
							faded = true;
					        obj.fadeTo(500,1,function(){
							
							
								console.log("finished dimming UP");
								//TO DO!! change this to media queries...getto hack for now
								t.$('#wrapper').attr('style', 'margin-top:' + t.$('#header').height() + "px");
								view.reInit();
								
						
							});
					    });	
					
					 */
					
				}

				
			});

/*********************************************** 
     Begin loader.js 
***********************************************/ 

FDJ.Views.LoaderView = Backbone.View.extend({
				id:"loader",
				template: _.template($('#loader-template').html()),

				initialize:function(){
					this.model.set('current_view',this);
					console.log("loader init");
					this.render();
				},

				render:function(){
					this.$el.html(this.template());
					return this;
				}
			});

/*********************************************** 
     Begin login.js 
***********************************************/ 

FDJ.Views.LoginView = Backbone.View.extend({
				id:"login",
				template: _.template($('#login-template').html()),

				initialize:function(){
					console.log("login init");
					this.render();
				},
				
				
				events:{
					"click #fbLoginButton": "doLogin"
				},
				
				doLogin:function(){
					
					this.model.get('facebookProxy').doLogin();
					event.preventDefault();
					
				},

				render:function(){
					this.$el.html(this.template());
					return this;
				}
			});

/*********************************************** 
     Begin home.js 
***********************************************/ 

FDJ.Views.HomeView = Backbone.View.extend({
				
				id:"home",
				template: _.template($('#home-template').html()),

				initialize:function(){
					this.render();	
					
					this.$('#fbInfoViewEl').html(new FDJ.Views.FbInfoView({ model: this.model }).$el);
					this.$('#gridViewEl').html(new FDJ.Views.GridView({ model: this.model }).$el);
					this.$('#header').html(new FDJ.Views.HeaderView({model: this.model}).$el);
					this.listenTo(this.model.get('facebookProxy'), 'change:statusError', this.onStatusError);
						
				},

				onStatusError:function(e){
					
					if(e.attributes.statusError == FDJ.Models.FacebookProxy.USER_LOGGEDOUT){
						
						console.log("status error: user logged out");
						//ask user to log back in
						this.$('#modalViewEl').html(new FDJ.Views.LoggedOutView({ model: this.model }).$el);
						  
					}else if(e.attributes.statusError == FDJ.Models.FacebookProxy.CONNECTION_LOST){

						console.log("status error: connection lost");
						this.$('#modalViewEl').html(new FDJ.Views.NoConnectionView({ model: this.model }).$el);

					}else if(e.attributes.statusError == FDJ.Models.FacebookProxy.NO_ERROR){

						console.log("AFTER ERROR RESUME NORMAL ACTIVITY!");

					}else if(e.attributes.statusError == FDJ.Models.FacebookProxy.UNKNOWN_ERROR){

						console.log("UNKNOWN_ERROR problem");

					}else{

						console.log("other problem");

					}

				},


				render:function(){
					//console.log(this.model.get("facebookProxy").attributes);
					this.$el.html(this.template());
					return this;

				}

			});

/*********************************************** 
     Begin header.js 
***********************************************/ 

FDJ.Views.HeaderView = Backbone.View.extend({
	id:"header",
	template:_.template($('#header-template').html()),

	initialize:function(){
		this.render();
		this.listenTo(this.model.get('youtubeProxy'), 'change:paused', this.onPausedChange);
		this.listenTo(this.model, 'change:current_song', this.onSongChange);
	},

	events:{
		"click #play_button": "doPlayPause",
		"click #skip_button": "doSkip"
	},

	doPlayPause:function(){
		console.log("doPlayPause");
		this.model.get('youtubeProxy').pause();
	},

	doSkip:function(){
		this.model.playNext();
	},
	render:function(){
		this.$el.html(this.template());
		return this;
	},

	onPausedChange:function(){
		if(this.model.get('youtubeProxy').get('paused')){
			this.$('#play_button').html('Play');
		}else{
			this.$('#play_button').html('Pause');
		}
	},
	onSongChange:function(){
		this.$('#header-current-song > p').html("Currently playing: "+this.model.get('current_song').get('data').song.title);
	}
});

/*********************************************** 
     Begin fbInfo.js 
***********************************************/ 

FDJ.Views.FbInfoView = Backbone.View.extend({
				id:"fbInfo",
				template: _.template($('#fbinfo-template').html()),

				initialize:function(){
					console.log("init fb info view");
					this.listenTo(this.model.get("facebookProxy"), 'change:fbUser', this.showFBUser);
					this.render();
				},

				events:{
					"click #fbLogoutButton": "doLogout"
				},

				doLogout:function(){
					this.model.get("facebookProxy").doLogout();
				},
				
				showFBUser:function(){
					console.log("show fb user");
					this.render();	
				},

				render:function(){
					this.$el.html(this.template(this.model.get("facebookProxy").attributes));
					console.log("render fb info view");
					return this;
				}
			});

/*********************************************** 
     Begin grid.js 
***********************************************/ 

FDJ.Views.GridView = Backbone.View.extend({
				
				id:"grid",
				template: _.template($('#grid-template').html()),

				initialize:function(){
					
					console.log("init grid view");
					this.listenTo(this.model, 'LastSongsChanged', this.initialSongs);
					this.render();

				},

				initialSongs:function(){
					var songs = this.model.get('current_queue');
					console.log("get initial song list!");
					
					this.stopListening(this.model, "LastSongsChanged");
					
					var $container = this.$('#container');
					
						$container.isotope({
			        		itemSelector : '.song',
			        		filter: '*',
			        		getSortData : {
			          			symbol : function( $elem ) {
			            			return $elem.attr('data-symbol');
			          			}
			        		},
			        		sortBy : 'symbol'
			      		});

						if(songs.length!=0){
							
							for (var i=0;i<songs.models.length;i++)
							{ 
								
								var newElement = new FDJ.Views.TileView({model:songs.models[i]});	
								$container.append( newElement.render().$el ).isotope( 'addItems', newElement.render().$el);
							}
							
						}else{

							this.$('#noSongsViewEl').html(new FDJ.Views.NoSongsView().$el);
							
						}
						

						var thisView = this;

						setTimeout(function(){
							$container.isotope('reloadItems').isotope({ sortBy: 'symbol',sortAscending : false });
							thisView.$('#grid-loader').remove();
							thisView.listenTo(this.model.get('current_queue'), 'add', thisView.addSong);
						}, 1000);
						
						//this.listenTo(this.model.get('current_queue'), 'add', this.addSong);
						
				},

				addSong:function(newSong){		
					
					console.log("New Song Added!");
					//console.log(newSong);

					
					if(this.$('#noSongsViewEl').length != 0){
						console.log("REMOVING LAME FRIENDS");
						this.$('#noSongsViewEl').remove();
					}
					

					var $container = this.$('#container');
					var newElement = new FDJ.Views.TileView({model:newSong});
		        	$container.prepend( newElement.render().$el ).isotope('reloadItems').isotope({ sortBy: 'symbol', sortAscending : false });
		          	
				},

				render:function(){
					
					this.$el.html(this.template());
					console.log("render grid view");
					return this;

				}
				
			});

/*********************************************** 
     Begin player.js 
***********************************************/ 

FDJ.Views.YTPlayer = Backbone.View.extend({
	id:"yt-player",
	tagName:"div",
	
	initialize:function(){
		this.listenTo(this.model, 'change:loaded', this.createPlayer);
		this.listenTo(this.model, 'change:song', this.onSongChange);
		this.listenTo(this.model, 'change:paused', this.onPausedChange);
	},

	onSongChange:function(){
		this.model.get('player').loadVideoById(this.model.get('song').get('videoId'));
	},

	onPausedChange:function(){
		if(!this.model.get('paused')){
			this.model.get('player').playVideo();
		}else{
			this.model.get('player').pauseVideo();
		}
	},

	createPlayer:function(){
		this.stopListening(this.model, "change:loaded");
		this.model.set('player', new YT.Player('yt-player', {
			playerVars: {'autoplay':0, 'controls':1},
	      height: '480',
	      width: '640',
	      events:{
	      	'onStateChange': $.proxy(this.model.__onStateChange, this.model)
	      }
	    }));
	}

});

/*********************************************** 
     Begin tile.js 
***********************************************/ 

FDJ.Views.TileView = Backbone.View.extend({
	template: _.template($('#tile-template').html()),
	className: 'song',

	events:{
		"click .play": "playSong"
	},	

	render:function(){
		this.$el.html(this.template(this.model.attributes));
		this.$el.attr('data-symbol', this.model.get('publish_time_mili'));
		return this;
	},

	playSong:function(){
		event.preventDefault();
		
		window.model.get("youtubeProxy").getYouTubeSongInfo(this.model.attributes);
		//console.log(this.model.attributes);
	}
});

/*********************************************** 
     Begin noSongs.js 
***********************************************/ 

FDJ.Views.NoSongsView = Backbone.View.extend({
				id:"nosongs",
				template: _.template($('#nosongs-template').html()),

				initialize:function(){
			
					this.render();
					console.log("no songs init");	
					
				},

				render:function(){
					this.$el.html(this.template());
					return this;
				}
			});

/*********************************************** 
     Begin loggedout.js 
***********************************************/ 

FDJ.Views.LoggedOutView = Backbone.View.extend({
				
				id:"loggedout",
				template: _.template($('#loggedout-template').html()),

				initialize:function(){
					
					this.render();
					console.log("logged out init");

					this.listenTo(this.model.get('facebookProxy'), 'change:statusError', this.onStatusError);
					
				},

				onStatusError:function(e){
	
					if(e.attributes.statusError == FDJ.Models.FacebookProxy.NO_ERROR){
						this.remove();
					}

				},
				
				events:{
					"click #fbReLoginButton": "doReLogin"
				},
				
				doReLogin:function(){

					this.model.get('facebookProxy').doReLogin();
					event.preventDefault();
					
				},



				render:function(){

					this.$el.html(this.template());
					return this;

				}
				
			});

/*********************************************** 
     Begin noconnection.js 
***********************************************/ 

FDJ.Views.NoConnectionView = Backbone.View.extend({
				id:"noconnection",
				template: _.template($('#noconnection-template').html()),

				initialize:function(){
					
					
						
					this.render();
					console.log("no connection out init");


					this.listenTo(this.model.get('facebookProxy'), 'change:statusError', this.onStatusError);
					
					
						
					
				},

				onStatusError:function(e){
					if(e.attributes.statusError == FDJ.Models.FacebookProxy.NO_ERROR){
						//console.log("AFTER ERROR RESUME NORMAL ACTIVITY!");
						this.remove();
					}
				},

				
				
				events:{
					"click #ignore": "doIgnore"
				},
				
				doIgnore:function(){
					//this.model.get('facebookProxy').set('statusError', NO_ERROR);
					this.remove();
					
					event.preventDefault();
					
				},



				render:function(){
					this.$el.html(this.template());
					return this;
				}
			});

/*********************************************** 
     Begin debug.js 
***********************************************/ 

FDJ.Views.DebugPanel = Backbone.View.extend({
				
				el:$("#debugpanel"),
				
				
				events:{
					"click #debug-login-button": "doDebugLogin",
					"click #debug-logout-button": "doDebugLogout",
					"click #debug-add-song": "doDebugAddSong",
					"click #debug-change-fbname": "doDebugChangeFbName",
					"click #debug-fb-logout": "doDebugFBLogout",
					"click #debug-connectionloss": "doDebugConnectionLoss",
					"click #debug-lamefriends": "doDebugLameFriends"
				},
				initialize:function(){
				
					console.log("Debug Panel Initialized");
				},
				doDebugLogin:function(){
					event.preventDefault();
					this.model.get('facebookProxy').doLogin();
					console.log("doDebugLogin");
				},
				
				doDebugLogout:function(){
					event.preventDefault();
					this.model.get('facebookProxy').doLogout();
					console.log("doDebugLogout");
				},

				doDebugAddSong:function(){
					
					
					var fake_song =  this.model.get("facebookProxy").get('debug_fake_song');
					
					var rid = Math.floor((Math.random()*10000)+1000);
					fake_song.cid="c"+ rid;
					fake_song.id= fake_song.id +"" +  rid;
					fake_song.publish_time = new Date().toISOString();
	
					this.model.get("current_queue").add(new FDJ.Models.Song(fake_song));

					event.preventDefault();

					console.log("deDebugAddSong");

				},

				doDebugChangeFbName:function(){
					event.preventDefault();
					
					this.model.get("facebookProxy").set('fbUser', {name:"Joe Debug",id:"12302336"});
					console.log("doDebugChangeFbName");
					
				},
				doDebugFBLogout:function(){
					event.preventDefault();
					this.model.get('facebookProxy').set('statusError', FDJ.Models.FacebookProxy.USER_LOGGEDOUT);
					console.log("doDebugFBLogout");
				},
				
				doDebugConnectionLoss:function(){
					event.preventDefault();
					this.model.get('facebookProxy').set('statusError', FDJ.Models.FacebookProxy.CONNECTION_LOST);
					console.log("doDebugConnectionLoss");
				},

				doDebugLameFriends:function(){
					event.preventDefault();
					$('#container').html("");
					$('#container').height(0);
					$('#noSongsViewEl').html(new FDJ.Views.NoSongsView().$el);
					console.log("doDebugLameFriends");
				},

				
			});